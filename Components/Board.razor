@using System.Drawing
@inject GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: @ColorTranslator.ToHtml(BoardColor);
            --player1: @ColorTranslator.ToHtml(Player1Color);
            --player2: @ColorTranslator.ToHtml(Player2Color);
        }
    </style>
</HeadContent>

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">ðŸ”½</span>
    }
</nav>

<article>
    @winnerMessage  
    <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
    <br />

    <!-- Display cumulative win counts for both players -->
    <span class="player1-wins">
    <span class="label">Player 1 Wins:</span> 
    <span class="score">@player1Wins</span>
    </span>

    <span class="player2-wins">
        <span class="label">Player 2 Wins:</span> 
        <span class="score">@player2Wins</span>
    </span>

    <!-- New button to reset the player scores -->
    <button class="reset-score-btn" @onclick="ResetScores">Reset Score</button>
    <br />
</article>

<div>
    <div class="board">
    @for (var i = 0; i < 42; i++)
    {
        <span class="container">
            <span></span>
        </span>
    }
    </div>
    @for (var i = 0; i < 42; i++)
    {
        <span class="@pieces[i]"></span>
    }
</div>

@code {
    private string[] pieces = new string[42];

    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    // Track cumulative wins for each player
    private int player1Wins = 0;
    private int player2Wins = 0;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";

    private void PlayPiece(byte col)
    {
        // Clear previous error message
        errorMessage = string.Empty;

        try
        {
            // Play the piece normally
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (ArgumentException ex)
        {
            // If State.PlayPiece throws an ArgumentException (e.g., column full), show it
            errorMessage = ex.Message;
            return;
        }

        // Check for win or tie after the move
        var result = State.CheckForWin();
        switch (result)
        {
            case GameState.WinState.Player1_Wins:
                winnerMessage = "Player 1 Wins!";
                player1Wins++; // Increment Player 1 cumulative wins
                break;
            case GameState.WinState.Player2_Wins:
                winnerMessage = "Player 2 Wins!";
                player2Wins++; // Increment Player 2 cumulative wins
                break;
            case GameState.WinState.Tie:
                winnerMessage = "It's a tie!";
                break;
            default:
                winnerMessage = string.Empty;
                break;
        }
    }

    void ResetGame()
    {
        // Reset the board for a new round
        // Cumulative wins are NOT reset here
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }

    // Cumulative wins are reset here
    void ResetScores()
    {
        player1Wins = 0;
        player2Wins = 0;
    }

    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow");

    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");

    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }
}
